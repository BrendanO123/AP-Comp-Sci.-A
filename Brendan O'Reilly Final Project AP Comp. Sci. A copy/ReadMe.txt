This is my final project banking system. It has a focus on automation and security. Apart from the security overrides in the code, it is completely safe from attacks meant to make the created objects incorrect. These overrides allow you to input "TEACHER" in place of most passcodes in the program, but they will not work when loading a bank from a file. (To remove these overrides, remove the lines marked "SECURITY OVERRIDE"). It features encrypted file storage, safe account passcode generation, protected Diffie-Hellman exchanges within the bank and bank account and more. Additionally, he program is easy to use, only a few console prompts are needed and thee menu system is clear and neat.

To run the program, run the main method in the code runner file and ensure the entire enclosing folder is present and unchanged.  The internal classes are  in the classes package and the necessary files are in or will be created in the ref folder.

The code is capable of creating, saving, and loading from files multiple banks concurrently. The system automatically manages the file storage and has options to delete files built in. The code can create any number of bank accounts per bank which can be deposited into, withdrawn from, have their balance checked, and/or be removed from the bank.

As the I/O files are autogenerated and removed easily from the CLI, there is no reason to include samples. Additionally, the encryption software would make it impossible (as it is designed to do so) to artificially load false banks. However, a bank has been provided as an example. Try loading up the program and hitting run. Then, in the CLI, select load bank and type in 0 for the bank number and "password" for the main password. The bank will be selected automatically. Then select print out all bank members and use "TEACHER" to override the passcode for the bank.