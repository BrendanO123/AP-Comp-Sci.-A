
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

import AventuraSuper.src.com.aventura.context.GraphicContext;
import AventuraSuper.src.com.aventura.context.RenderContext;
import AventuraSuper.src.com.aventura.engine.RenderEngine;
import AventuraSuper.src.com.aventura.math.transform.Rotation;
import AventuraSuper.src.com.aventura.math.transform.Translation;
import AventuraSuper.src.com.aventura.math.vector.Matrix4;
import AventuraSuper.src.com.aventura.math.vector.Vector3;
import AventuraSuper.src.com.aventura.math.vector.Vector4;
import AventuraSuper.src.com.aventura.model.camera.Camera;
import AventuraSuper.src.com.aventura.model.light.AmbientLight;
import AventuraSuper.src.com.aventura.model.light.DirectionalLight;
import AventuraSuper.src.com.aventura.model.light.Lighting;
import AventuraSuper.src.com.aventura.model.texture.Texture;
import AventuraSuper.src.com.aventura.model.world.Vertex;
import AventuraSuper.src.com.aventura.model.world.World;
import AventuraSuper.src.com.aventura.model.world.WrongArraySizeException;
import AventuraSuper.src.com.aventura.model.world.shape.ClosedCylinder;
import AventuraSuper.src.com.aventura.model.world.shape.Cone;
import AventuraSuper.src.com.aventura.model.world.shape.Cube;
import com.aventura.model.world.shape.Element;
import AventuraSuper.src.com.aventura.model.world.shape.Sphere;
import AventuraSuper.src.com.aventura.model.world.shape.Trellis;
import AventuraSuper.src.com.aventura.model.world.triangle.RectangleMesh;
import AventuraSuper.src.com.aventura.test.TestMultiElementsTexture;
import AventuraSuper.src.com.aventura.view.SwingView;
import AventuraSuper.src.com.aventura.view.View;

import FBM.*;

/**
 * ------------------------------------------------------------------------------ 
 * MIT License
 * 
 * Copyright (c) 2018 Olivier BARRY
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * ------------------------------------------------------------------------------
 * 
 * This class is a demo application using Aventura Render Engine API
 */
public class MyDemo {

	// View to be displayed
	private SwingView view;
	
	public View createView(GraphicContext context) {

		// Create the frame of the application 
		JFrame frame = new JFrame("MyDemo");
		// Set the size of the frame
		frame.setSize(context.getPixelWidth(), context.getPixelHeight());
		
		// Create the view to be displayed
		view = new SwingView(context, frame);
		
		// Create a panel and add it to the frame
		JPanel panel = new JPanel() {
			
		    public void paintComponent(Graphics graph) {
		    	graph.drawImage(view.getImageView(), 0, 0, null);
		    }
		};
		frame.getContentPane().add(panel);
		frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
 
		// Locate application frame in the center of the screen
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		frame.setLocation(dim.width/2 - frame.getWidth()/2, dim.height/2 - frame.getHeight()/2);
		
		// Render the frame on the display
		frame.setVisible(true);
		
		return view;
	}
	

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		System.out.println("********* STARTING APPLICATION *********");

		Texture texsnow = new Texture("resources/texture/texture_snow_590x590.jpg");
		Texture texstone1 = new Texture("resources/texture/texture_stone1_1700x1133.jpg");
		Texture texrock = new Texture("resources/texture/texture_rock_stone_400x450.jpg");
		Texture texearth = new Texture("resources/texture/texture_earthtruecolor_nasa_big_2048x1024.jpg");
	
		// Camera
		Vector4 eye = new Vector4(0,0,50,1);
		Vector4 poi = new Vector4(0,0,0,1);
		Camera camera = new Camera(eye, poi, Vector4.Z_AXIS);		
				
		TestMultiElementsTexture test = new TestMultiElementsTexture();
				
		// Create a new World
		System.out.println("********* Creating World");
		World world = new World();
		world.setBackgroundColor(Color.BLACK);
		Element e;

		Noise noiseGen = new Noise();
        noiseGen.setFractalOctaves(8);
        noiseGen.setSeed(System.currentTimeMillis());
        File png = new File("AventuraSuper/resources/textures/Preview.png");

		int scale = 48;
        BufferedImage img = new BufferedImage(scale, scale, BufferedImage.TYPE_INT_RGB);
		e= new Element("Ground", false);
		float[][] arr = new float[scale][scale];
        for(int x=0; x<scale; x++){
            for(int y=0; y<scale; y++){
                Float3 value=noiseGen.getTerrainNoise((float) 3*x, (float) 3*y, 0);
                /*img.setRGB(x, y, new Color(value.x/2 + 0.5f, value.x/2 + 0.5f, value.x/2 + 0.5f).getRGB());
                img.setRGB(x, y, new Color(value.y/4.14f + 0.5f, 0.f, value.x/2 + 0.5f).getRGB());//tested max was Â±2.067122
                img.setRGB(x, y, new Color(value.z/4.14f + 0.5f, 0.f, value.x/2 + 0.5f).getRGB());*/
                img.setRGB(x, y, new Color(value.y/4.14f + 0.5f, value.z/4.14f + 0.5f, value.x/2 + 0.5f).getRGB());
				arr[x][y]=value.x;
            }
        }
        try{ImageIO.write(img, "png", png);}
        catch(IOException ex){ex.printStackTrace();}


		try{
			e = new Trellis(scale, scale, scale-1, scale-1, arr, new Texture("AventuraSuper/resources/textures/Preview.png"));
		} catch (WrongArraySizeException ex) {
			ex.printStackTrace();
			System.exit(-1);
		}

		world.addElement(e);
		
		System.out.println(world);
		for (int i=0; i<world.getNbElements(); i++)
			System.out.println(world.getElement(i));

		// Calculate normals
		world.generate();

		e.setSpecularExp(3.0f);
		e.setSpecularColor(new Color(1.0f, 1.0f, 1.0f));

		// Create lighting
		System.out.println("********* Creating Lighting");
		DirectionalLight dl = new DirectionalLight(new Vector3(1,-0.5f,3f), 0.7f);
		AmbientLight al = new AmbientLight(0.3f);
		Lighting lighting = new Lighting(dl, al, true);

		GraphicContext context = new GraphicContext(1.5f, 0.9f, 1, 100, GraphicContext.PERSPECTIVE_TYPE_FRUSTUM, 1000);
		View view = test.createView(context);

		RenderContext rContext = new RenderContext(RenderContext.RENDER_STANDARD_INTERPOLATE_WITH_LANDMARKS);
		rContext.setTextureProcessing(RenderContext.TEXTURE_PROCESSING_ENABLED);
		//rContext.setRenderingLines(RenderContext.RENDERING_LINES_ENABLED);
		//rContext.setDisplayNormals(RenderContext.DISPLAY_NORMALS_ENABLED);
		
		RenderEngine renderer = new RenderEngine(world, lighting, camera, rContext, context);
		renderer.setView(view);
		renderer.render();
		
		System.out.println("********* Rendering...");
		int nb_images = 360;
		Rotation r1 = new Rotation((float)Math.PI*2/(float)nb_images, Vector3.X_AXIS);
		Rotation r2 = new Rotation((float)Math.PI*2*1.5f/(float)nb_images, Vector3.Y_AXIS);
		Rotation r3 = new Rotation((float)Math.PI*2*2.5f/(float)nb_images, Vector3.Z_AXIS);
		Matrix4 r = r1.times(r2).times(r3);
		for (int i=0; i<=nb_images; i++) {
			//world.expandTransformation(r);
			renderer.render();
		}

		System.out.println("********* ENDING APPLICATION *********");

	}
}
